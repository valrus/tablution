//
//  VTabTypesetter.h
//  tablution
//
//  Created by Ian Mccowan on 12/24/11.
//  Copyright 2011 Nuance, Inc. All rights reserved.
//

#import <AppKit/AppKit.h>

@interface VTabTypesetter : NSTypesetter

- (NSRange)characterRangeForGlyphRange:(NSRange)glyphRange
                      actualGlyphRange:(NSRangePointer)actualGlyphRange;
//Returns the range for the characters in the receiver’s text store that are mapped to the specified glyphs.

//Parameters
//glyphRange
//The range of glyphs.
//actualGlyphRange
//On return, the range of all glyphs mapped to the characters in the receiver’s text store. May be NULL.
//Return Value
//The range for the characters in the receiver’s text store that are mapped to the glyphs in glyphRange.
//
//Discussion
//A subclass can override this method to interact with custom glyph storage.

- (NSRange)glyphRangeForCharacterRange:(NSRange)charRange
                  actualCharacterRange:(NSRangePointer)actualCharRange;

//Returns the range for the glyphs mapped to the characters of the text store in the specified range.

//Parameters
//charRange
//The range of the characters whose glyph range is desired.
//actualCharRange
//On return, all characters mapped to those glyphs; may be NULL.
//Return Value
//The range for the glyphs mapped to the characters of the text store in charRange.

//Discussion
//A subclass can override this method to interact with custom glyph storage.

- (NSUInteger)getGlyphsInRange:(NSRange)glyphsRange
                        glyphs:(NSGlyph *)glyphBuffer
              characterIndexes:(NSUInteger *)charIndexBuffer
             glyphInscriptions:(NSGlyphInscription *)inscribeBuffer
                   elasticBits:(BOOL *)elasticBuffer
                    bidiLevels:(unsigned char *)bidiLevelBuffer;

//Extracts the information needed to lay out the provided glyphs from the provided range.

//Parameters
//glyphsRange
//The range of glyphs.
//glyphBuffer
//The glyphs to lay out.
//charIndexBuffer
//The original characters for the glyphs. Note that a glyph at index 1 is not necessarily mapped to the character at index 1, because a glyph may be for a ligature or accent.
//inscribeBuffer
//The inscription attributes for each glyph, which are used to layout characters that are combined together.
//elasticBuffer
//Contains a Boolean value indicating whether a glyph is elastic for each glyph. An elastic glyph can be made longer at the end of a line or when needed for justification.
//bidiLevelBuffer
//Contains the bidirectional level value generated by NSGlyphGenerator, in case a subclass chooses to use this value.
//Discussion
//A subclass can override this method to interact with custom glyph storage.

- (void)getLineFragmentRect:(NSRectPointer)lineFragmentRect
                   usedRect:(NSRectPointer)lineFragmentUsedRect
              remainingRect:(NSRectPointer)remainingRect
    forStartingGlyphAtIndex:(NSUInteger)startingGlyphIndex
               proposedRect:(NSRect)proposedRect
                lineSpacing:(CGFloat)lineSpacing
     paragraphSpacingBefore:(CGFloat)paragraphSpacingBefore
      paragraphSpacingAfter:(CGFloat)paragraphSpacingAfter;

//Calculates line fragment rectangle, line fragment used rectangle, and remaining rectangle for a line fragment.
//
//Parameters
//lineFragmentRect
//On return, the calculated line fragment rectangle.
//lineFragmentUsedRect
//On return, the used rectangle (the portion of the line fragment rectangle that actually contains marks).
//remainingRect
//On return, the remaining rectangle of proposedRect.
//startingGlyphIndex
//The glyph index where the line fragment starts.
//proposedRect
//The proposed rectangle of the line fragment.
//lineSpacing
//The line spacing.
//paragraphSpacingBefore
//The spacing before the paragraph.
//paragraphSpacingAfter
//The spacing after the paragraph.
//Discussion
//The height of the line fragment is determined using lineSpacing, paragraphSpacingBefore, and paragraphSpacingAfter as well as proposedRect. The width for lineFragmentUsedRect is set to the lineFragmentRect width. In the standard implementation, paragraph spacing is included in the line fragment rectangle but not the line fragment used rectangle; line spacing is included in both.

- (void)setLineFragmentRect:(NSRect)fragmentRect
              forGlyphRange:(NSRange)glyphRange
                   usedRect:(NSRect)usedRect
             baselineOffset:(CGFloat)baselineOffset;

//Sets the line fragment rectangle where the specified glyphs are laid out.
//
//Parameters
//fragmentRect
//The line fragment rectangle where the glyphs in glyphRange are laid out.
//glyphRange
//The range of the specified glyphs.
//usedRect
//The portion of fragmentRect, in the NSTextContainer object’s coordinate system, that actually contains glyphs or other marks that are drawn (including the text container’s line fragment padding). The usedRect must be equal to or contained within fragmentRect.
//baselineOffset
//The vertical distance in pixels from the line fragment origin to the baseline on which the glyphs align.
//Discussion
//The exact positions of the glyphs must be set after the line fragment rectangle with setLocation:forStartOfGlyphRange:.
//
//A subclass can override this method to interact with custom glyph storage.

- (void)substituteGlyphsInRange:(NSRange)glyphRange
                     withGlyphs:(NSGlyph *)glyphs;

//Replaces the specified glyphs with specified replacement glyphs.
//
//Parameters
//glyphRange
//The range of glyphs to be substituted.
//glyphs
//The glyphs to substitute for the glyphs in glyphRange.
//Discussion
//This method does not alter the glyph-to-character mapping or invalidate layout information.
//
//A subclass can override this method to interact with custom glyph storage.

- (void)insertGlyph:(NSGlyph)glyph
       atGlyphIndex:(NSUInteger)glyphIndex 
     characterIndex:(NSUInteger)charIndex;

//Enables the typesetter to insert a new glyph into the stream.
//
//Parameters
//glyph
//The glyph to insert into the glyph cache.
//glyphIndex
//The index at which to insert glyph.
//charIndex
//The index of the character that glyph maps to. If the glyph is mapped to several characters, charIndex should indicate the first character to which it’s mapped.
//Discussion
//The standard typesetter uses this method for inserting hyphenation glyphs. Because this method keeps the glyph caches synchronized, subclasses should always use this method to insert glyphs instead of calling layoutManager directly.
//
//A subclass can override this method to interact with custom glyph storage.

- (void)deleteGlyphsInRange:(NSRange)glyphRange;

//Deletes the specified glyphs from the glyph cache maintained by the layout manager.
//
//Parameters
//glyphRange
//The range of glyphs to be deleted.
//Discussion
//A subclass can override this method to interact with custom glyph storage.


- (void)setNotShownAttribute:(BOOL)flag
               forGlyphRange:(NSRange)glyphRange;

//Sets whether the specified glyphs are not shown.
//Parameters
//flag
//YES if the glyphs in glyphRange are not shown, NO if they are shown.
//glyphRange
//The range of glyphs in question.
//Discussion
//For example, a tab or newline character doesn’t leave any marks; it just indicates where following glyphs are laid out.
//
//A subclass can override this method to interact with custom glyph storage.

- (void)setDrawsOutsideLineFragment:(BOOL)flag
                      forGlyphRange:(NSRange)glyphRange;

//Sets whether the specified glyphs exceed the bounds of the line fragment in which they are laid out.
//Parameters
//flag
//YES if the glyphs in glyphRange exceed the bounds of the line fragment in which they are laid out, NO otherwise.
//glyphRange
//The range of the glyphs in question.
//Discussion
//This can happen when text is set at a fixed line height. For example, if the user specifies a fixed line height of 12 points and sets the font size to 24 points, the glyphs will exceed their layout rectangles.
//
//A subclass can override this method to interact with custom glyph storage.

-  (void)setLocation:(NSPoint)location
    withAdvancements:(const CGFloat *)advancements
forStartOfGlyphRange:(NSRange)glyphRange;

//Sets the location where the specified glyphs are laid out.
//Parameters
//location
//The location where the glyphs in glyphRange are laid out. The x-coordinate of location is expressed relative to the line fragment rectangle origin, and the y-coordinate is expressed relative to the baseline previously specified by setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:.
//advancements
//The nominal glyph advance width specified in the font metric information.
//glyphRange
//The range of glyphs whose layout location is being set. This series of glyphs can be displayed with a single PostScript show operation (a nominal range).
//Discussion
//Setting the location for a series of glyphs implies that the glyphs preceding it can’t be included in a single show operation.
//
//Before setting the location for a glyph range, you must specify line fragment rectangle with setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:.
//
//A subclass can override this method to interact with custom glyph storage.

- (void)setAttachmentSize:(NSSize)attachmentSize
            forGlyphRange:(NSRange)glyphRange;

//Sets the size the specified glyphs (assumed to be attachments) will be asked to draw themselves at.
//Parameters
//attachmentSize
//The size the glyphs in glyphRange (assumed to be attachments) will be asked to draw themselves at.
//glyphRange
//The range of glyphs the attachment size applies to.
//Discussion
//A subclass can override this method to interact with custom glyph storage.

- (void)setBidiLevels:(const uint8_t *)levels
        forGlyphRange:(NSRange)glyphRange;

//Sets the direction of the specified glyphs for bidirectional text.
//Parameters
//levels
//Values in levels can range from 0 to 61 as defined by Unicode Standard Annex #9.
//glyphRange
//The range of glyphs for which the bidirectional text levels are desired.
//Discussion
//A subclass can override this method to interact with custom glyph storage.

- (void)willSetLineFragmentRect:(NSRectPointer)lineRect
                  forGlyphRange:(NSRange)glyphRange
                       usedRect:(NSRectPointer)usedRect
                 baselineOffset:(CGFloat *)baselineOffset;

//Called by the typesetter just prior to storing the actual line fragment rectangle location in the layout manager.
//Parameters
//lineRect
//The rectangle in which the glyphs in glyphRange are laid out.
//glyphRange
//The range of the glyphs to lay out.
//usedRect
//The portion of lineRect, in the NSTextContainer object’s coordinate system, that actually contains glyphs or other marks that are drawn (including the text container’s line fragment padding). The usedRect must be equal to or contained within lineRect.
//baselineOffset
//The vertical distance in pixels from the line fragment origin to the baseline on which the glyphs align.
//Discussion
//Called by the typesetter just prior to calling setLineFragmentRect:forGlyphRange:usedRect:baselineOffset: which stores the actual line fragment rectangle location in the layout manager.
//
//A subclass can override this method to customize the text layout process. For example, it could change the shape of the line fragment rectangle. The subclass is responsible for ensuring that the modified rectangle remains valid (for example, that it lies within the text container).

- (BOOL)shouldBreakLineByWordBeforeCharacterAtIndex:(NSUInteger)charIndex;

//Returns whether the line being laid out should be broken by a word break at the specified character.
//Parameters
//charIndex
//The index of the character just after the proposed word break would occur.
//Return Value
//YES if the line should be broken by a word break, NO otherwise.
//
//Discussion
//The typesetter calls this method, if implemented by a subclass, before breaking a line by word wrapping before the character at charIndex, enabling the subclass to control line breaking.
//
//A subclass can override this method to customize the text layout process. If the method returns NO, the typesetter continues looking for a break point.

@end
